plugins {
    id("java-library")
    id("idea")
    id("maven-publish")
    id("net.neoforged.gradle.userdev") version "7.0.93"
}

val build = System.getenv("GITHUB_RUN_NUMBER")?.let { "-build.$it" } ?: ""

base.archivesName.set("archives_base_name"())
version = "${"mod_version"()}+mc${"minecraft_version"()}$build"
group = "mod_group_id"()

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))
java.withSourcesJar()

minecraft.accessTransformers.file(file("src/main/resources/META-INF/accesstransformer.cfg"))

runs {
    configureEach {
        systemProperty("forge.logging.markers", "REGISTRIES")
        systemProperty("forge.logging.console.level", "debug")

        modSource(project.sourceSets["main"])
    }

    maybeCreate("client").apply {
        systemProperty("forge.enabledGameTestNamespaces", "mod_id"())
    }

    maybeCreate("server").apply {
        systemProperty("forge.enabledGameTestNamespaces", "mod_id"())
        programArgument("--nogui")
    }

    maybeCreate("gameTestServer").apply {
        systemProperty("forge.enabledGameTestNamespaces", "mod_id"())
    }

    maybeCreate("data").apply {
        programArguments.addAll(
            "--mod",
            "mod_id"(),
            "--all",
            "--output",
            file("src/generated/resources/").getAbsolutePath(),
            "--existing",
            file("src/main/resources/").getAbsolutePath()
        )
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources {
        srcDir(file("src/generated/resources"))
        exclude(".cache")
    }
}

repositories {
    mavenLocal()

    maven {
        name = "Modrinth"
        url = uri("https://api.modrinth.com/maven")
    }

    maven {
        name = "Illusive Soulworks maven"
        url = uri("https://maven.theillusivec4.top/")
    }

    maven {
        name = "KosmX's maven"
        url = uri("https://maven.kosmx.dev/")
    }

    maven { url = uri("https://maven.minecraftforge.net/") }
    maven { url = uri("https://maven.blamejared.com") }
}

dependencies {
    implementation("net.neoforged:neoforge:${"neo_version"()}")

    implementation("maven.modrinth:fusion-connected-textures:${"fusion_version"()}-neoforge-mc${"minecraft_version"()}")
    implementation("com.github.glitchfiend:TerraBlender-neoforge:${"minecraft_version"()}-${"terrablender_version"()}")
    //FSR we have to disable veil during data generation :/
    //implementation "foundry.veil:Veil-neoforge-${"minecraft_version"()}:${"veil_version"()}"
    implementation("dev.kosmx.player-anim:player-animation-lib-forge:${"player_anim_version"()}+${"minecraft_version"()}")

    runtimeOnly("maven.modrinth:ferrite-core:6.0.3-forge")
    runtimeOnly("maven.modrinth:badpackets:neo-0.6.0")
    runtimeOnly("maven.modrinth:wthit:neo-10.2.0")
    implementation("maven.modrinth:emi:1.1.0+1.20.4+neoforge")
    runtimeOnly("maven.modrinth:emitrades:neoforge-1.3.0+mc1.20.4")


    compileOnly("top.theillusivec4.curios:curios-neoforge:${"curios_version"()}:api")
    runtimeOnly("top.theillusivec4.curios:curios-neoforge:${"curios_version"()}")

}

tasks.processResources {
    filesMatching("META-INF/mods.toml") {
        expand(
            mapOf(
                "minecraft_version" to "minecraft_version"(),
                "minecraft_version_range" to "minecraft_version_range"(),
                "neo_version" to "neo_version"(),
                "neo_version_range" to "neo_version_range"(),
                "loader_version_range" to "loader_version_range"(),
                "mod_id" to "mod_id"(),
                "mod_name" to "mod_name"(),
                "mod_license" to "mod_license"(),
                "mod_version" to "mod_version"(),
                "mod_authors" to "mod_authors"(),
                "mod_description" to "mod_description"(),
                "fusion_version" to "fusion_version"(),
                "terrablender_version" to "terrablender_version"(),
                "veil_version" to "veil_version"(),
                "player_anim_version" to "player_anim_version"(),
                "curios_version" to "curios_version"()
            )
        )
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"
}

configure<PublishingExtension> {
    publications {
        create<MavenPublication>("mod") {
            artifactId = "archives_base_name"()
            groupId = "mod_group_id"()
            version = "mod_version"()
            pom.packaging = "jar"

            artifact(tasks.build)
        }
    }

    repositories {
        if (System.getenv("MAVEN_USERNAME") != null && System.getenv("MAVEN_PASSWORD") != null) {
            maven {
                name = "StardustModding"
                url = uri("https://maven.stardustmodding.org/public-snapshots/")

                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }

        mavenLocal()
    }
}

operator fun String.invoke(): String =
    rootProject.ext[this] as? String ?: throw IllegalStateException("Property $this is not defined")
